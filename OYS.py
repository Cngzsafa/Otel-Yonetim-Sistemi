import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import fdb
import datetime
import threading
import time
# dsn yoluna lütfen kendi bilgisayar kullanıcı adınızı yazınız. Otel veri tabanını otomatik masaüstünde tanımlayacaktır.
conn = fdb.connect(
    dsn="localhost:C:/Users/""/Desktop/VERITABANI/OTEL.FDB",
    user='sysdba',
    password='masterkey',
    charset='UTF8'
)
cursor = conn.cursor()


def table_yap(name, ddl):
    cursor.execute("SELECT COUNT(*) FROM RDB$RELATIONS WHERE RDB$RELATION_NAME = ?", (name.upper(),))
    exists = cursor.fetchone()[0]
    if exists == 0:
        cursor.execute(ddl)
        conn.commit()


table_yap("ODALAR", """
CREATE TABLE ODALAR (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ODA_NO VARCHAR(10),
    YATAK_SAYISI INTEGER,
    DURUM VARCHAR(20),
    KAT INTEGER
)
""")

table_yap("KISILER", """
CREATE TABLE KISILER (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AD VARCHAR(50),
    SOYAD VARCHAR(50)
)
""")

cursor.execute("SELECT RDB$FIELD_NAME FROM RDB$RELATION_FIELDS WHERE RDB$RELATION_NAME='KISILER'")
fields = [f[0].strip() for f in cursor.fetchall()]
if "TELEFON" not in fields:
    cursor.execute("ALTER TABLE KISILER ADD TELEFON VARCHAR(20)")
if "CINSIYET" not in fields:
    cursor.execute("ALTER TABLE KISILER ADD CINSIYET VARCHAR(10)")
conn.commit()

table_yap("REZERVASYONLAR", """
CREATE TABLE REZERVASYONLAR (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ODA_ID INTEGER,
    KISI_ID INTEGER,
    GIRIS_TARIHI TIMESTAMP,
    CIKIS_TARIHI TIMESTAMP,
    DURUM VARCHAR(20)
)
""")


class OtelApp:
    def __init__(self, AnaPencere):
        self.AnaPencere = AnaPencere
        self.AnaPencere.title("Otel Yönetim Sistemi")
        self.arayuzsira = []
        self.Temel()
        self.odalar_yukle()
        threading.Thread(target=self.rezervasyon_monitor, daemon=True).start()
        threading.Thread(target=self.arayuzguncel, daemon=True).start()

    def Temel(self):
        frame = ttk.Frame(self.AnaPencere)
        frame.pack(fill="both", expand=True, padx=10, pady=10)
        self.tree = ttk.Treeview(frame, columns=("oda_no", "yatak", "durum", "tarih"), show="headings")
        self.tree.heading("oda_no", text="Oda No")
        self.tree.heading("yatak", text="Yatak Sayısı")
        self.tree.heading("durum", text="Durum")
        self.tree.heading("tarih", text="Tarih Bilgisi")
        self.tree.pack(fill="both", expand=True)
        btn_frame = ttk.Frame(frame)
        btn_frame.pack(pady=5)
        ttk.Button(btn_frame, text="Oda Ekle", command=self.oda_ekle).grid(row=0, column=0, padx=5)
        ttk.Button(btn_frame, text="Kişiler", command=self.kisiler_pencere).grid(row=0, column=1, padx=5)
        ttk.Button(btn_frame, text="Kişi Ata", command=self.kisi_ata).grid(row=0, column=2, padx=5)
        ttk.Button(btn_frame, text="Rezervasyon", command=self.rezervasyon_yap).grid(row=0, column=3, padx=5)
        ttk.Button(btn_frame, text="Oda Boşalt", command=self.oda_bosalt_buton).grid(row=0, column=4, padx=5)
        ttk.Button(btn_frame, text="Detaylı Bilgi", command=self.detayli_bilgi_pencere).grid(row=0, column=5, padx=5)

    def odalar_yukle(self):
        for i in self.tree.get_children():
            self.tree.delete(i)
        cursor.execute("SELECT * FROM ODALAR")
        for oda in cursor.fetchall():
            oda_id, oda_no, yatak, durum, kat = oda
            tarih_bilgi = "-"
            if durum in ("Dolu", "Rezerve", "Temizlikte"):
                cursor.execute("SELECT GIRIS_TARIHI, CIKIS_TARIHI FROM REZERVASYONLAR WHERE ODA_ID=? ORDER BY ID DESC ROWS 1",(oda_id,))
                rez = cursor.fetchone()
                if rez:
                    if rez[0] and rez[1]:
                        tarih_bilgi = f"{rez[0].strftime('%Y-%m-%d %H:%M')} - {rez[1].strftime('%Y-%m-%d %H:%M')}"
                    elif rez[0]:
                        tarih_bilgi = f"{rez[0].strftime('%Y-%m-%d %H:%M')}"
                    else:
                        tarih_bilgi = ""
            self.tree.insert("", "end", iid=oda_id, values=(oda_no, yatak, durum, tarih_bilgi))

    def oda_ekle(self):
        pencere = tk.Toplevel(self.AnaPencere)
        pencere.title("Oda Ekle")
        tk.Label(pencere, text="Oda No").grid(row=0, column=0)
        tk.Label(pencere, text="Yatak Sayısı").grid(row=1, column=0)
        tk.Label(pencere, text="Kat").grid(row=2, column=0)
        oda_no = tk.Entry(pencere)
        oda_no.grid(row=0, column=1)
        yatak_sayisi = tk.Entry(pencere)
        yatak_sayisi.grid(row=1, column=1)
        kat_entry = tk.Entry(pencere)
        kat_entry.grid(row=2, column=1)

        def kaydet():
            try:
                cursor.execute("INSERT INTO ODALAR (ODA_NO, YATAK_SAYISI, DURUM, KAT) VALUES (?, ?, ?, ?)",(oda_no.get(), int(yatak_sayisi.get()), "Boş", int(kat_entry.get())))
                conn.commit()
                self.odalar_yukle()
                pencere.destroy()
            except ValueError:
                messagebox.showerror("Hata", "Yatak sayısı ve kat sayı olmalı!")
        ttk.Button(pencere, text="Kaydet", command=kaydet).grid(row=3, column=0, columnspan=2)

    def kisiler_pencere(self):
        pencere = tk.Toplevel(self.AnaPencere)
        pencere.title("Kişiler")
        tree = ttk.Treeview(pencere, columns=("id", "ad", "soyad", "telefon", "cinsiyet"), show="headings")
        tree.heading("id", text="ID")
        tree.heading("ad", text="Ad")
        tree.heading("soyad", text="Soyad")
        tree.heading("telefon", text="Telefon")
        tree.heading("cinsiyet", text="Cinsiyet")
        tree.pack(fill="both", expand=True)

        def kisileri_yukle():
            for row in tree.get_children():
                tree.delete(row)
            cursor.execute("SELECT * FROM KISILER")
            for kisi in cursor.fetchall():
                tree.insert("", "end", iid=kisi[0],values=(kisi[0], kisi[1], kisi[2], kisi[3] if kisi[3] else "", kisi[4] if kisi[4] else ""))
        kisileri_yukle()
        tk.Label(pencere, text="Ad").pack()
        ad = tk.Entry(pencere)
        ad.pack()
        tk.Label(pencere, text="Soyad").pack()
        soyad = tk.Entry(pencere)
        soyad.pack()
        tk.Label(pencere, text="Telefon").pack()
        telefon = tk.Entry(pencere)
        telefon.pack()
        tk.Label(pencere, text="Cinsiyet").pack()
        cinsiyet = ttk.Combobox(pencere, values=["Erkek", "Kadın", "Diğer"])
        cinsiyet.pack()

        def ekle():
            cursor.execute("INSERT INTO KISILER (AD, SOYAD, TELEFON, CINSIYET) VALUES (?, ?, ?, ?)",(ad.get(), soyad.get(), telefon.get(), cinsiyet.get()))
            conn.commit()
            kisileri_yukle()
        ttk.Button(pencere, text="Ekle", command=ekle).pack()

    def kisi_ata(self):
        secili = self.tree.selection()
        if not secili:
            messagebox.showwarning("Uyarı", "Lütfen oda seçin!")
            return
        oda_id = int(secili[0])
        cursor.execute("SELECT YATAK_SAYISI FROM ODALAR WHERE ID=?", (oda_id,))
        yatak_sayisi = cursor.fetchone()[0]
        cursor.execute("""SELECT COUNT(*) FROM REZERVASYONLAR WHERE ODA_ID=? AND DURUM='Dolu' AND CIKIS_TARIHI > ?""", (oda_id, datetime.datetime.now()))
        mevcut_kisi_sayisi = cursor.fetchone()[0]
        max_eklenebilecek = yatak_sayisi - mevcut_kisi_sayisi
        if max_eklenebilecek <= 0:
            messagebox.showinfo("Bilgi", "Bu oda dolu! Başka kişi eklenemez.")
            return
        pencere = tk.Toplevel(self.AnaPencere)
        pencere.title("Kişi Ata (Çoklu)")
        tk.Label(pencere, text=f"Odadaki mevcut kişi sayısı: {mevcut_kisi_sayisi} / {yatak_sayisi}").pack(pady=5)
        tree = ttk.Treeview(pencere, columns=("id", "ad", "soyad"), show="headings", selectmode="extended")
        tree.heading("id", text="ID")
        tree.heading("ad", text="Ad")
        tree.heading("soyad", text="Soyad")
        tree.pack(fill="both", expand=True)
        cursor.execute("SELECT * FROM KISILER")
        for kisi in cursor.fetchall():
            tree.insert("", "end", iid=kisi[0], values=(kisi[0], kisi[1], kisi[2]))

        def ctrl(event):
            region = tree.identify("region", event.x, event.y)
            if region == "cell" or region == "tree":
                item = tree.identify_row(event.y)
                if item:
                    if item in tree.selection():
                        tree.selection_remove(item)
                    else:
                        tree.selection_add(item)
            return "break"
        tree.bind("<Button-1>", ctrl)
        tk.Label(pencere, text="Giriş Tarihi (YYYY-AA-GG SS:DD)").pack()
        giris_entry = tk.Entry(pencere)
        giris_entry.pack()
        tk.Label(pencere, text="Çıkış Tarihi (YYYY-AA-GG SS:DD)").pack()
        cikis_entry = tk.Entry(pencere)
        cikis_entry.pack()
        giris_entry.insert(0, datetime.datetime.now().strftime("%Y-%m-%d %H:%M"))

        def ata():
            secilen_kisiler = tree.selection()
            if not secilen_kisiler:
                messagebox.showwarning("Uyarı", "Lütfen kişi seçin!")
                return
            if len(secilen_kisiler) > max_eklenebilecek:
                messagebox.showerror("Hata", f"Bu oda için sadece {max_eklenebilecek} kişi ekleyebilirsiniz!")
                return
            try:
                giris_dt = datetime.datetime.strptime(giris_entry.get(), "%Y-%m-%d %H:%M")
                cikis_dt = datetime.datetime.strptime(cikis_entry.get(), "%Y-%m-%d %H:%M")
            except ValueError:
                messagebox.showerror("Hata", "Tarih formatı hatalı! YYYY-AA-GG SS:DD formatını kullanın.")
                return
            if cikis_dt <= giris_dt:
                messagebox.showerror("Hata", "Çıkış tarihi giriş tarihinden önce olamaz!")
                return
            for kisi_id in map(int, secilen_kisiler):
                cursor.execute("SELECT COUNT(*) FROM REZERVASYONLAR WHERE ODA_ID=? AND NOT (CIKIS_TARIHI <= ? OR GIRIS_TARIHI >= ?)",(oda_id, giris_dt, cikis_dt))
                if cursor.fetchone()[0] > 0:
                    messagebox.showerror("Hata", f"{kisi_id} için tarih çakışması var! İşlem iptal edildi.")
                    return
            for kisi_id in map(int, secilen_kisiler):
                cursor.execute("INSERT INTO REZERVASYONLAR (ODA_ID, KISI_ID, GIRIS_TARIHI, CIKIS_TARIHI, DURUM) VALUES (?, ?, ?, ?, ?)",(oda_id, kisi_id, giris_dt, cikis_dt, "Dolu"))
            cursor.execute("UPDATE ODALAR SET DURUM=? WHERE ID=?", ("Dolu", oda_id))
            conn.commit()
            self.odalar_yukle()
            pencere.destroy()
        ttk.Button(pencere, text="Ata", command=ata).pack(pady=5)
    def rezervasyon_yap(self):
        pencere = tk.Toplevel(self.AnaPencere)
        pencere.title("Rezervasyon Yap")
        tk.Label(pencere, text="Giriş Tarihi (YYYY-AA-GG SS:DD)").grid(row=0, column=0)
        giris = tk.Entry(pencere)
        giris.grid(row=0, column=1)
        tk.Label(pencere, text="Çıkış Tarihi (YYYY-AA-GG SS:DD)").grid(row=1, column=0)
        cikis = tk.Entry(pencere)
        cikis.grid(row=1, column=1)
        tk.Label(pencere, text="Kişi Seç").grid(row=2, column=0)
        kisi_combo = ttk.Combobox(pencere)
        cursor.execute("SELECT ID, AD, SOYAD FROM KISILER")
        kisiler = cursor.fetchall()
        kisi_combo["values"] = [f"{k[0]} - {k[1]} {k[2]}" for k in kisiler]
        kisi_combo.grid(row=2, column=1)
        tk.Label(pencere, text="Oda Seç").grid(row=3, column=0)
        oda_combo = ttk.Combobox(pencere)
        cursor.execute("SELECT ID, ODA_NO, YATAK_SAYISI FROM ODALAR WHERE DURUM='Boş'")
        odalar = cursor.fetchall()
        oda_combo["values"] = [f"{o[0]} - {o[1]} ({o[2]} yatak)" for o in odalar]
        oda_combo.grid(row=3, column=1)

        def kaydet():
            if not kisi_combo.get() or not oda_combo.get():
                messagebox.showwarning("Uyarı", "Kişi ve oda seçilmeli!")
                return
            kisi_id = int(kisi_combo.get().split(" - ")[0])
            oda_id = int(oda_combo.get().split(" - ")[0])
            yatak_sayisi = int(oda_combo.get().split("(")[1].split()[0])
            cursor.execute("""SELECT COUNT(*) FROM REZERVASYONLAR WHERE ODA_ID=? AND DURUM='Dolu' AND CIKIS_TARIHI > ?""", (oda_id, datetime.datetime.now()))
            mevcut_kisi = cursor.fetchone()[0]
            if mevcut_kisi >= yatak_sayisi:
                messagebox.showerror("Hata", "Bu oda dolu!")
                return
            try:
                giris_dt = datetime.datetime.strptime(giris.get(), "%Y-%m-%d %H:%M")
                cikis_dt = datetime.datetime.strptime(cikis.get(), "%Y-%m-%d %H:%M")
            except ValueError:
                messagebox.showerror("Hata", "Tarih formatı hatalı! YYYY-AA-GG SS:DD formatını kullanın.")
                return
            cursor.execute("SELECT COUNT(*) FROM REZERVASYONLAR WHERE ODA_ID=? AND NOT (CIKIS_TARIHI <= ? OR GIRIS_TARIHI >= ?)",(oda_id, giris_dt, cikis_dt))
            if cursor.fetchone()[0] > 0:
                messagebox.showerror("Hata", "Bu tarihlerde oda dolu!")
                return
            cursor.execute("INSERT INTO REZERVASYONLAR (ODA_ID, KISI_ID, GIRIS_TARIHI, CIKIS_TARIHI, DURUM) VALUES (?, ?, ?, ?, ?)",(oda_id, kisi_id, giris_dt, cikis_dt, "Rezerve"))
            cursor.execute("UPDATE ODALAR SET DURUM=? WHERE ID=?", ("Rezerve", oda_id))
            conn.commit()
            self.odalar_yukle()
            pencere.destroy()
        ttk.Button(pencere, text="Kaydet", command=kaydet).grid(row=4, column=0, columnspan=2)

    def arayuzguncel(self):
        while True:
            if self.arayuzsira:
                item = self.arayuzsira.pop(0)
                if item[0] == "uyari":
                    rez_id, oda_id = item[1], item[2]
                    self.AnaPencere.after(0, lambda rez_id=rez_id, oda_id=oda_id: self.cikis_uyari(rez_id, oda_id))
            time.sleep(1)

    def rezervasyon_monitor(self):
        while True:
            cursor.execute("SELECT ID, ODA_ID, CIKIS_TARIHI FROM REZERVASYONLAR WHERE DURUM='Dolu'")
            for rez_id, oda_id, cikis in cursor.fetchall():
                if cikis and cikis <= datetime.datetime.now():
                    if not any(item[1] == rez_id for item in self.arayuzsira):
                        self.arayuzsira.append(("uyari", rez_id, oda_id))
            time.sleep(30)

    def temizlik_tamamla(self, oda_id):
        cursor.execute("UPDATE ODALAR SET DURUM=? WHERE ID=?", ("Boş", oda_id))
        conn.commit()
        self.odalar_yukle()

    def cikis_uyari(self, rez_id, oda_id):
        cursor.execute("SELECT KISI_ID FROM REZERVASYONLAR WHERE ODA_ID=? AND DURUM='Dolu'", (oda_id,))
        kisiler = [row[0] for row in cursor.fetchall()]
        if not kisiler:
            return
        cevap = messagebox.askquestion("Çıkış Süresi Doldu", f"Odadaki {len(kisiler)} kişi için çıkış zamanı geldi. Süreyi uzatmak ister misiniz?")
        if cevap == "yes":
            yeni_cikis = simpledialog.askstring("Süre Uzat", "Yeni çıkış tarihi (YYYY-AA-GG SS:DD):")
            try:
                yeni_cikis_dt = datetime.datetime.strptime(yeni_cikis, "%Y-%m-%d %H:%M")
                cursor.execute("UPDATE REZERVASYONLAR SET CIKIS_TARIHI=? WHERE ODA_ID=? AND DURUM='Dolu'",(yeni_cikis_dt, oda_id))
                conn.commit()
                self.odalar_yukle()
            except:
                messagebox.showerror("Hata", "Tarih formatı hatalı.")
        else:
            cursor.execute("UPDATE ODALAR SET DURUM=? WHERE ID=?", ("Temizlikte", oda_id))
            cursor.execute("UPDATE REZERVASYONLAR SET DURUM=? WHERE ODA_ID=? AND DURUM='Dolu'", ("Tamamlandı", oda_id))
            conn.commit()
            self.odalar_yukle()
            threading.Timer(3600, lambda: self.temizlik_tamamla(oda_id)).start()

    def oda_bosalt_buton(self):
        secili = self.tree.selection()
        if not secili:
            messagebox.showwarning("Uyarı", "Lütfen oda seçin!")
            return
        oda_id = int(secili[0])
        cursor.execute("UPDATE ODALAR SET DURUM=? WHERE ID=?", ("Temizlikte", oda_id))
        cursor.execute("""UPDATE REZERVASYONLAR SET DURUM='Tamamlandı', GIRIS_TARIHI=NULL, CIKIS_TARIHI=NULL WHERE ODA_ID=? AND DURUM='Dolu'""", (oda_id,))
        conn.commit()
        self.odalar_yukle()
        threading.Timer(10, lambda: self.temizlik_tamamla(oda_id)).start()
        messagebox.showinfo("Bilgi", "Oda boşaltıldı, temizlik sürecine alındı.")

    def detayli_bilgi_pencere(self):
        pencere = tk.Toplevel(self.AnaPencere)
        pencere.title("Oda Detaylı Bilgi")
        filter_frame = ttk.Frame(pencere)
        filter_frame.pack(fill="x", padx=5, pady=5)
        tk.Label(filter_frame, text="Oda No / Kişi Ara:").grid(row=0, column=0)
        search_entry = tk.Entry(filter_frame)
        search_entry.grid(row=0, column=1, padx=5)
        tk.Label(filter_frame, text="Durum:").grid(row=0, column=2)
        durum_combo = ttk.Combobox(filter_frame, values=["Tümü", "Boş", "Dolu", "Rezerve", "Temizlikte"])
        durum_combo.current(0)
        durum_combo.grid(row=0, column=3, padx=5)
        tk.Label(filter_frame, text="Kat:").grid(row=0, column=4)
        cursor.execute("SELECT DISTINCT KAT FROM ODALAR")
        katlar = [str(k[0]) for k in cursor.fetchall()]
        kat_combo = ttk.Combobox(filter_frame, values=["Tümü"] + katlar)
        kat_combo.current(0)
        kat_combo.grid(row=0, column=5, padx=5)
        tree = ttk.Treeview(pencere, columns=("oda_no", "kat", "yatak", "durum", "kisi", "telefon", "cinsiyet", "giris", "cikis"), show="headings")
        tree.heading("oda_no", text="Oda No")
        tree.heading("kat", text="Kat")
        tree.heading("yatak", text="Yatak Sayısı")
        tree.heading("durum", text="Durum")
        tree.heading("kisi", text="Kişi")
        tree.heading("telefon", text="Telefon")
        tree.heading("cinsiyet", text="Cinsiyet")
        tree.heading("giris", text="Giriş Tarihi")
        tree.heading("cikis", text="Çıkış Tarihi")
        tree.pack(fill="both", expand=True)
        cursor.execute("SELECT ID, ODA_NO, KAT, YATAK_SAYISI, DURUM FROM ODALAR")
        odalar = cursor.fetchall()

        def filtrele(*args):
            arama = search_entry.get().strip().lower()
            durum_sec = durum_combo.get()
            kat_sec = kat_combo.get()
            tree.delete(*tree.get_children())
            for oda in odalar:
                oda_id, oda_no, kat, yatak, durum = oda
                if durum_sec != "Tümü" and durum != durum_sec:
                    continue
                if kat_sec != "Tümü" and str(kat) != kat_sec:
                    continue
                cursor.execute("""SELECT K.AD, K.SOYAD, K.TELEFON, K.CINSIYET, R.GIRIS_TARIHI, R.CIKIS_TARIHI FROM REZERVASYONLAR R JOIN KISILER K ON R.KISI_ID = K.ID WHERE R.ODA_ID = ?""", (oda_id,))
                kisiler = cursor.fetchall()
                if not kisiler:
                    if arama in oda_no.lower():
                        tree.insert("", "end", values=(oda_no, kat, yatak, durum, "-", "-", "-", "-", "-"))
                else:
                    for k in kisiler:
                        ad, soyad, telefon, cinsiyet, giris, cikis = k
                        giris_str = giris.strftime("%Y-%m-%d %H:%M") if giris else "-"
                        cikis_str = cikis.strftime("%Y-%m-%d %H:%M") if cikis else "-"
                        kisi_ad = f"{ad} {soyad}"
                        if arama in oda_no.lower() or arama in kisi_ad.lower():
                            tree.insert("", "end", values=(oda_no, kat, yatak, durum,kisi_ad, telefon if telefon else "-", cinsiyet if cinsiyet else "-", giris_str, cikis_str))

        search_entry.bind("<KeyRelease>", filtrele)
        durum_combo.bind("<<ComboboxSelected>>", filtrele)
        kat_combo.bind("<<ComboboxSelected>>", filtrele)
        filtrele()
if __name__ == "__main__":
    AnaPencere = tk.Tk()
    app = OtelApp(AnaPencere)
    AnaPencere.mainloop()

